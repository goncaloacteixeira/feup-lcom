//
// Created by skidr on 29/10/2019.
//

#include "mouse.h"

uint16_t byte_packet[3];
uint32_t byte;
struct packet prPacket;

static int32_t hookID = 12;

int mouse_subscribe_int(uint32_t *bit_no) {
    (*bit_no) |= BIT(hookID);
    if(sys_irqsetpolicy(IRQ_MOUSE, IRQ_REENABLE | IRQ_EXCLUSIVE, &hookID) == OK) {
        return 0;
    } else {
        printf("Error::sys_irqsetpolicy(KBD_ID, IRQ_REENABLE | IRQ_EXCLUSIVE, &hookID)\n");
        return 1;
    }
}

int mouse_unsubscribe_int(void) {
    if (sys_irqrmpolicy(&hookID) == OK) {
        return 0;
    }
    else {
        printf("Error::sys_irqrmpolicy(&hookID)\n");
        return 1;
    }
}

void (mouse_ih)(void) {
    uint32_t st;
    if (sys_inb(ST_REG, &st) != 0) {
        printf("Error::sys_inb(ST_REG, &st)\n");
        return;
    }
    if (st & OB_FULL)
        if ((st & (TIMEOUT_ERROR | PRT_ERROR)) == 0)
            if (sys_inb(BUF_OUT, &byte) != 0) {
                printf("Error::sys_inb(BUF_OUT, &byte)\n");
                return;
            }
}

void process_packet(void) {

    // Masks to fill the struct

    if (byte_packet[0] & LB)
        prPacket.lb = true;
    else
        prPacket.lb = false;

    if (byte_packet[0] & RB)
        prPacket.rb = true;
    else
        prPacket.rb = false;

    if (byte_packet[0] & MB)
        prPacket.mb = true;
    else
        prPacket.mb = false;

    if (byte_packet[0] & X_OV)
        prPacket.x_ov = true;
    else
        prPacket.x_ov = false;

    if (byte_packet[0] & Y_OV)
        prPacket.y_ov = true;
    else
        prPacket.y_ov = false;

    if (byte_packet[0] & X_NEG)
        prPacket.delta_x = byte_packet[1] - 256;
    else
        prPacket.delta_x = byte_packet[1];

    if (byte_packet[0] & Y_NEG)
        prPacket.delta_y = byte_packet[2] - 256;
    else
        prPacket.delta_y = byte_packet[2];

    // assign the bytes
    prPacket.bytes[0] = byte_packet[0];
    prPacket.bytes[1] = byte_packet[1];
    prPacket.bytes[2] = byte_packet[2];
}

int mouse_issue_cmd(uint32_t command) {
    uint32_t st;
    uint32_t ctr = 0;

    while (ctr != ACK) {
        if (sys_inb(ST_REG, &st) != 0)
            return 1;

        if ((st & IB_FULL) == 0) {
            if (sys_outb(CMD_REG, CMD_INIT) != 0)
                return 1;
        } else
            continue;

        if (sys_inb(ST_REG, &st) != 0)
            return 1;

        if ((st & IB_FULL) == 0) {
            if (sys_outb(BUF_OUT, command) != 0)
                return 1;
        }
        else
            continue;

        tickdelay(micros_to_ticks(DELAY_US));

        if (sys_inb(BUF_OUT, &ctr) != 0)
            return 1;
    }
    return 0;
}
